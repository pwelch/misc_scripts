#!/bin/bash

# Set directories to archive
DIRS_TO_ARCHIVE=(
   '/tmp/foo'
#  '/var/log' \
#  '/etc'
);

## Global Variables
readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(readlink -m $(dirname $0))
readonly DATETIME=$(date "+%Y%m%d")
readonly ARCHIVE_DIR="${PROGDIR}/${HOSTNAME}_${DATETIME}"

## Functions
file_name() {
  local dir_name=$1
  echo $dir_name | sed 's./._.g'
}

create_host_archive_dir() {
  local archive_dir=$1; shift

  if [[ ! -d $archive_dir ]]; then
    echo '*** Creating archive directory...'
    mkdir $archive_dir
  else
    echo '*** Archive directory already exists...'
  fi
}

create_archive_for_host() {
  echo '*** Creating final archive for host...'
  tar czf "${HOSTNAME}_${DATETIME}.tar.gz" "${ARCHIVE_DIR}"
}

create_archive_for_dir() {
  local dir_to_archive=$1; shift
  local filename=$(file_name $dir_to_archive)

  if [[ -d $dir_to_archive ]]; then
    echo "*** Creating tar file ${filename}" \
    && tar czf "${ARCHIVE_DIR}/${filename}.tar.gz" $dir_to_archive
  else
    echo "*** WARNING ${dir_to_archive} not found. Moving on..."
  fi
}

clean_up() {
  echo "*** Cleaning up..."
  rm -rf $ARCHIVE_DIR
}

usage() {
  cat <<-EOF
  usage: $PROGNAME

  Creates an archive of selected directories for a host before decommission.

  May require running as root if archiving system directories.
EOF
  exit 0
}

## Main
main() {
  if [[ "$@" == "-h" ]];  then usage; fi
  if [[ "$EUID" -ne 0 ]]; then echo "*** WARNING may require running as root for system directories"; fi

  create_host_archive_dir $ARCHIVE_DIR

  local i
  for i in "${DIRS_TO_ARCHIVE[@]}"; do
    create_archive_for_dir $i
  done

  create_archive_for_host
  clean_up
}

main $@

